name: Build and Run Singularity Container

# Trigger the workflow on push or pull request to the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-run:
    # Use a self-hosted runner 
    # Required for workflows needing Singularity and passphrase input
    # runs-on: self-hosted
    # Alternative for GitHub-hosted runners (disabled due to incompatibility with passphrase flow)
    # runs-on: ubuntu-24.04
    runs-on: ubuntu-latest

    steps:
    # Step 1: Clone the repository
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Initialize submodules if any
    - name: Checkout code with submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    # Optional debug step to show current submodule state
    - name: Show submodule status
      run: git submodule status

    # Step 3: Install system dependencies for Singularity
    - name: Install dependencies for Singularity
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          uuid-dev build-essential libseccomp-dev pkg-config \
          squashfs-tools cryptsetup curl wget git uidmap runc openssh-client

    # Step 4: Install a specific version of Go (required for Singularity)
    - name: Install Go
      run: |
        export GOVERSION=1.17.3 OS=linux ARCH=amd64
        wget -O /tmp/go${GOVERSION}.${OS}-${ARCH}.tar.gz \
          https://dl.google.com/go/go${GOVERSION}.${OS}-${ARCH}.tar.gz
        sudo tar -C /usr/local -xzf /tmp/go${GOVERSION}.${OS}-${ARCH}.tar.gz

    # Step 5: Export Go to PATH
    - name: Setup Go Environment
      run: echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc && source ~/.bashrc

    # Step 6: Download and install Singularity from a .deb package
    - name: Install Singularity
      run: |
        wget https://github.com/sylabs/singularity/releases/download/v4.1.3/singularity-ce_4.1.3-focal_amd64.deb
        sudo apt-get install -y libfuse2 fuse2fs
        sudo dpkg -i singularity-ce_4.1.3-focal_amd64.deb || true
        sudo apt-get install -f -y

    # Step 7: Verify that Singularity was successfully installed
    - name: Verify Singularity version
      run: singularity --version

    # Step 8: Build the Singularity container image
    - name: Build Singularity Image
      run: sudo singularity build grayscale.sif Singularity.def

    # Step 9: Optionally test the container locally
    - name: Run Application in Singularity
      run: singularity run grayscale.sif input output Average

    # Step 10: Upload result files for later inspection
    - name: Upload output images
      uses: actions/upload-artifact@v4
      with:
        name: pgm-results
        path: output/

    # Step 11: Upload the built SIF container file
    - name: Upload grayscale.sif
      uses: actions/upload-artifact@v4
      with:
        name: grayscale-sif
        path: grayscale.sif

    # Step 12: Normalize line endings in the job script
    - name: Convert job.sh to UNIX line endings
      run: dos2unix job.sh || true

    # Step 13: Set up SSH authentication using private key, certificate, and public key
    - name: Setup SSH key, cert, pub, and agent (GitHub-hosted runner compatible)
      run: |
        echo "Setting up SSH configuration..."
        mkdir -p ~/.ssh
        echo "${{ secrets.G100_SSH_KEY }}" | tr -d '\r' > ~/.ssh/my_key
        echo "${{ secrets.G100_SSH_CERT }}" | tr -d '\r' > ~/.ssh/my_key-cert.pub
        echo "${{ secrets.G100_SSH_PUB }}" | tr -d '\r' > ~/.ssh/my_key.pub
        chmod 600 ~/.ssh/my_key
        chmod 644 ~/.ssh/my_key-cert.pub ~/.ssh/my_key.pub

        sudo apt-get update && sudo apt-get install -y expect

        eval "$(ssh-agent -s)"
        echo 'spawn ssh-add ~/.ssh/my_key' > addkey.exp
        echo 'expect "Enter passphrase"' >> addkey.exp
        echo "send \"${{ secrets.G100_SSH_PASSPHRASE }}\\r\"" >> addkey.exp
        echo 'expect eof' >> addkey.exp
        expect addkey.exp

        cat <<CONFIG > ~/.ssh/config
        Host galileo
          HostName ${{ secrets.SLURM_HOST }}
          User ${{ secrets.SLURM_USER }}
          IdentityFile ~/.ssh/my_key
          CertificateFile ~/.ssh/my_key-cert.pub
          IdentitiesOnly yes
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null
        CONFIG

    # Step 14: Ensure working directory exists on remote cluster
    - name: Ensure ~/seproject exists on Galileo
      run: |
        echo "Creating remote project directory if not exists..."
        ssh -F ~/.ssh/config galileo "mkdir -p ~/seproject"

    # Step 15: Transfer the job script and container to the remote cluster
    - name: Transfer job script and sif file to cluster via scp
      run: |
        echo "Transferring job.sh and grayscale.sif to Galileo..."
        scp -F ~/.ssh/config grayscale.sif job.sh galileo:~/seproject/

    # Step 16: Submit the job to the SLURM scheduler on the cluster
    - name: Submit job to cluster via SSH
      run: |
        echo "Submitting SLURM job on Galileo..."
        ssh -F ~/.ssh/config galileo "cd ~/seproject && sbatch job.sh"
        echo "SLURM job submitted."
